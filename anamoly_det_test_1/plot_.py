import numpy as np
import torch
import tqdm
from matplotlib import pyplot as plt
from sklearn.metrics import roc_auc_score
from sklearn.svm import OneClassSVM
from torch.utils.data import ConcatDataset, DataLoader
from torchvision.datasets import CIFAR10, MNIST
from torchvision.transforms import Compose, Normalize

from anamoly_det_test_1.datasets import OneClassDataset

if __name__ == '__main__':
    mnist_ent_max = torch.tensor([
[0.9777190723191667, 0.9809511788296152, 0.9831971700197266, 0.9844147155351674, 0.9847685439296087, 0.9839802209296797, 0.9815211467410236, 0.9820765598028045, 0.9819208390838465, 0.9820395419685856, 0.9807985308011344],
[0.9879954440249665, 0.9854219435777579, 0.9852241691043369, 0.985307278348815, 0.9852078734521346, 0.9849143531579845, 0.984611741903816, 0.9846420356489021, 0.9832256896064019, 0.9834429224217041, 0.9831987854704334],
[0.8392441552897348, 0.8380314617219612, 0.8239487026176476, 0.8144015530941933, 0.8222750572383615, 0.827851568411068, 0.8274045340409852, 0.8308350526371476, 0.8318807061509862, 0.8342905303575535, 0.8376306240303927],
[0.842780132306172, 0.8700724503796726, 0.8778161369804713, 0.8758635979094498, 0.8755368568880942, 0.87803844814396, 0.8755461342917568, 0.876164554364089, 0.8765445341365139, 0.875688571577532, 0.8755737302360982],
[0.9304782930149297, 0.8992761501377073, 0.897744706089889, 0.901135807972658, 0.9047645674567182, 0.9079517164346356, 0.9073847006017135, 0.9088715919087581, 0.9084569806214277, 0.9088991714092877, 0.9105424002824551],
[0.8062007607130754, 0.7941424889001361, 0.7908607792552717, 0.8043351519951027, 0.8017741052953693, 0.8078007063834683, 0.8051636503384229, 0.8058445131145517, 0.8052731580126207, 0.802272531560425, 0.8036778595092409],
[0.9246937366477143, 0.9128352797072773, 0.9155454572032989, 0.907866020143406, 0.9095284371854371, 0.9120802624757263, 0.9132327311760303, 0.9151738024597904, 0.9154333902757458, 0.9138304545290384, 0.9163921189549178],
[0.8910407485272591, 0.9182872706917645, 0.9170553508104117, 0.9145247593666276, 0.9170399620891405, 0.9175032991122506, 0.9169400284778216, 0.9159877892978766, 0.9162344742229301, 0.9164948414586298, 0.9175323236056965],
[0.8234636277281338, 0.8228537625269269, 0.8202531184765111, 0.8233061417187193, 0.824032863960398, 0.8265137013071966, 0.8307347098969731, 0.830613083015547, 0.8253786904308215, 0.8276562529202072, 0.8290379628960005],
[0.9046313108108053, 0.8935935830090965, 0.8984201983550287, 0.8975363821353511, 0.8990479045401135, 0.900979192093342, 0.8990623520953153, 0.8986918092486299, 0.8996593238185727, 0.9010087474837436, 0.9010378941293844]
])

    mnist_random = torch.tensor([
[0.9029073392990966, 0.9203153033246835, 0.9491373017184749, 0.9577852111730789, 0.9559535642077489, 0.9582827767936185, 0.9603948310230475, 0.9620949021477458, 0.9648286425209258, 0.9693266732497713, 0.9702899617142766],
[0.9910025733373489, 0.994082919624922, 0.9938413071524085, 0.9925948670397459, 0.9923549706454886, 0.9929417275844902, 0.9929050233652564, 0.9930485924577227, 0.993155896987368, 0.9935690321907207, 0.9936010136491333],
[0.7132453289683316, 0.751285294939034, 0.7654462223911794, 0.7804133926077932, 0.783031793895149, 0.7884977190774444, 0.794723459669869, 0.8028946586551414, 0.8112517362200412, 0.8141710925668254, 0.8143624458526948],
[0.7629757169865796, 0.8260880275972043, 0.8449441063993766, 0.8543636795789539, 0.8603742715702392, 0.8658999813979392, 0.8721321284994438, 0.8703786047005407, 0.8755134349878457, 0.8773690417292576, 0.8792275466748699],
[0.8675114724919386, 0.8568510767578603, 0.8798448204182824, 0.87892409064052, 0.8846820488174247, 0.8902199673907465, 0.8912321882526738, 0.8941794713349858, 0.8980261266040597, 0.9010165117228511, 0.9018729108246268],
[0.7584984538664112, 0.8151344640172322, 0.7994969758560662, 0.8084549359637988, 0.81913947704303, 0.8265419388163849, 0.8183157490870605, 0.818592431553391, 0.8232488224888522, 0.8280732507588084, 0.8291587163144641],
[0.8872204627165221, 0.9089134994792368, 0.9062105153008314, 0.9119641441394007, 0.9077141832644342, 0.9106476843338076, 0.9145832228153117, 0.9170408404493711, 0.9191946354982253, 0.9222060889796523, 0.9224620387958936],
[0.8912389093392722, 0.9152563596527833, 0.9217704581104424, 0.9247403727259984, 0.927716507983923, 0.9310209101075914, 0.9298597442158729, 0.9325783665976883, 0.9332644987971046, 0.9345613088206722, 0.93706970141351],
[0.7033356139727899, 0.7872002658759728, 0.8016727759092965, 0.8151671353895384, 0.8109150537643146, 0.809689635306249, 0.8166759652833586, 0.8168211407151837, 0.8185571515517421, 0.8205272827589346, 0.8231899266159562],
[0.8609668451717921, 0.9128446123148698, 0.9140489158689776, 0.910474301446557, 0.9096659615190703, 0.9095706139431201, 0.9112206222170576, 0.9133682143535502, 0.9144000905023785, 0.9152560649154595, 0.9156096448545683]
])

    mnist_ocvm = torch.tensor([0.9825580342284781, 0.9941058952181053, 0.8136368319781899, 0.8845586830434106, 0.9168753854037742, 0.7937241382515288, 0.9311778592924898, 0.9338088437864221, 0.8380246357816078, 0.9145391423258376]
)

    cifar_gaussian = torch.tensor([
[0.6074138611111111, 0.6237565185185185, 0.623721, 0.6256341296296297, 0.6270888518518519, 0.627341537037037, 0.6284399814814815, 0.6281574444444444, 0.6469669814814816, 0.6452891111111112],
[0.40400940740740743, 0.3847034629629629, 0.3843375185185185, 0.39141362962962967, 0.38820514814814816, 0.3876585, 0.39303403703703704, 0.3888405555555555, 0.3913107962962963, 0.39595244444444444],
[0.6441286203703703, 0.6536595370370369, 0.6505082592592593, 0.6518076296296296, 0.6521744074074075, 0.6538220925925926, 0.6542283333333333, 0.6550435740740742, 0.6538634629629629, 0.6555596851851851],
[0.5548716481481482, 0.5580905185185185, 0.5475170925925926, 0.5488297962962964, 0.5371091481481481, 0.539244, 0.5368309814814815, 0.536126462962963, 0.531435425925926, 0.5246591851851852],
[0.7560334074074074, 0.7606252592592592, 0.7595757037037036, 0.7576519444444445, 0.7592072962962964, 0.7586843703703704, 0.7603475555555556, 0.7596086296296295, 0.758214648148148, 0.7591302777777778],
[0.5161120092592593, 0.5054609259259258, 0.49577133333333334, 0.4970646481481482, 0.49387025925925926, 0.4997142592592593, 0.49696959259259266, 0.49507064814814816, 0.4957972962962963, 0.4935043333333333],
[0.7636367314814814, 0.7560994444444445, 0.7577546481481482, 0.7464106111111111, 0.744224574074074, 0.7400817222222222, 0.7432518888888889, 0.7431868148148149, 0.7418306481481483, 0.7427531851851852],
[0.5303448240740741, 0.5162301851851852, 0.5056294814814815, 0.49900431481481483, 0.5024069814814814, 0.5062671851851852, 0.5110806296296297, 0.5138231481481481, 0.5155703333333334, 0.5145971851851852],
[0.6947943055555557, 0.6945592407407408, 0.6960044074074074, 0.6995595, 0.6982298703703704, 0.6936708148148149, 0.6902729444444445, 0.6928348703703704, 0.6905522592592593, 0.689572462962963],
[0.4320597962962963, 0.4335931296296296, 0.43348024074074076, 0.4440242037037037, 0.4357334259259259, 0.4301644444444444, 0.4272959074074074, 0.42507548148148144, 0.4254415185185185, 0.4280591296296296]
])

    cifar_uniform = torch.tensor([
[0.713338537037037, 0.7531061296296296, 0.7391249259259259, 0.7558093333333333, 0.7526807777777776, 0.7551013148148149, 0.7529269814814815, 0.7592610370370371, 0.7592863333333334, 0.7569141296296296],
[0.49723412962962965, 0.4910555, 0.5318941111111111, 0.5249361851851853, 0.5207997962962962, 0.5177006666666666, 0.5175635925925925, 0.50876, 0.5076023888888889, 0.5064086481481481],
[0.6469435740740741, 0.6328923703703704, 0.6258947222222222, 0.6277122777777777, 0.6288468333333335, 0.6370163888888889, 0.6393990185185185, 0.6389893333333333, 0.6376022777777778, 0.6405161296296297],
[0.49769322222222223, 0.5003437962962963, 0.5030413148148148, 0.504933962962963, 0.5032384814814814, 0.5039254444444444, 0.5050779074074074, 0.5040053333333334, 0.5025888148148148, 0.5013587037037037],
[0.7085653888888888, 0.712032648148148, 0.7108513055555556, 0.7135536574074074, 0.719163101851852, 0.7229048055555555, 0.7241193611111111, 0.7335145555555557, 0.7337730925925925, 0.7332401851851852],
[0.4841176759259259, 0.4808611296296296, 0.47411233333333336, 0.4750318518518518, 0.4736644814814815, 0.4748569444444445, 0.4740286296296296, 0.4720683888888889, 0.4703951111111111, 0.4710199814814815],
[0.7592340555555556, 0.7610926851851852, 0.7563532407407407, 0.7549079999999999, 0.7541839814814816, 0.7534858703703705, 0.7542894999999998, 0.7552359629629631, 0.7565634074074074, 0.7565973333333331],
[0.5585934907407407, 0.568422, 0.5978330000000001, 0.604015925925926, 0.6103039814814815, 0.6103392962962962, 0.6091734629629629, 0.606289, 0.6045887222222223, 0.6037887222222222],
[0.7121470277777777, 0.736636712962963, 0.729829287037037, 0.732232675925926, 0.7326909629629629, 0.7368730740740741, 0.7340005, 0.7364137962962963, 0.738666574074074, 0.739050074074074],
[0.4702222962962963, 0.43032564814814817, 0.43680244444444444, 0.4408011851851852, 0.44392468518518513, 0.4462571111111111, 0.44616014814814814, 0.4481477777777778, 0.4410445925925926, 0.4412972777777778]
]
)

    cifar_ocsvm = torch.tensor([0.6548333703703705, 0.41207862962962966, 0.6525573148148148, 0.49808648148148144, 0.749050037037037, 0.5150005555555556, 0.7153356666666667, 0.5151546666666666, 0.6800278148148149, 0.49463235185185184] )

    # config = {'num_workers': 20, 'batch_size': 64}
    # roc_list = []
    # for _class in range(10):
    #     config['class'] = _class
    #     inlier = [config['class']]
    #     outlier = list(range(10))
    #     outlier.remove(config['class'])
    #     cifar_train = MNIST(root='../', train=True, download=True)
    #     cifar_test = MNIST(root='../', train=False, download=True)
    #     train_dataset = OneClassDataset(cifar_train, one_class_labels=inlier)
    #     test_dataset = ConcatDataset([OneClassDataset(cifar_train, zero_class_labels=outlier), OneClassDataset(cifar_test, one_class_labels=inlier, zero_class_labels=outlier)])
    #
    #     dataloader = DataLoader(train_dataset, batch_size=config['batch_size'], shuffle=True, num_workers=config['num_workers'])
    #     train_x = []
    #     test_x = []
    #     test_y = []
    #     for x, l in tqdm.tqdm(dataloader):
    #         train_x.append(x.reshape(x.shape[0], -1))
    #     dataloader = DataLoader(test_dataset, batch_size=config['batch_size'], shuffle=True, num_workers=config['num_workers'])
    #     for x, l in tqdm.tqdm(dataloader):
    #         test_x.append(x.reshape(x.shape[0], -1))
    #         test_y.append(l)
    #
    #     train_x = torch.cat(train_x).cpu().numpy()
    #     test_x = torch.cat(test_x).cpu().numpy()
    #     test_y = torch.cat(test_y).cpu().numpy()
    #
    #     svm = OneClassSVM(kernel='rbf').fit(train_x)
    #     score = svm.score_samples(test_x)
    #     roc = roc_auc_score(test_y, score)
    #     roc_list.append(roc)
    #
    #     print(f'class: {_class}, roc: {roc}')
    #
    # print(roc_list)

    entropy = mnist_ent_max.mean(dim=0).cpu().numpy()
    random = mnist_random.mean(dim=0).cpu().numpy()
    ocsvm = mnist_ocvm.mean(dim=0).item()
    size = entropy.shape[0]
    x = [1] + list(np.arange(1, size)*5)
    yticks = np.arange(.83, 1, .05)
    plt.plot(x, entropy, label='max entropy encoder')
    plt.plot(x, random, label='random encoder')
    plt.plot([x[0], x[-1]], [ocsvm, ocsvm], label='ocsvm')


    plt.xticks(x)
    # plt.yticks(yticks)
    plt.xlabel('no of encoders')
    plt.ylabel('roc score')
    plt.legend()
    plt.grid()
    plt.show()
